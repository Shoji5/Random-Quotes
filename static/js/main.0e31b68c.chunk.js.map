{"version":3,"sources":["components/Header.js","components/Quote.js","components/Auther.js","components/RandomQuote.js","components/ListQuotes.js","components/Main.js","components/Footer.js","components/App.js","index.js"],"names":["Header","setRandom","to","className","replace","onClick","Date","now","Quote","content","Auther","auther","genre","ArrowRightAlt","RandomQuote","random","useState","quote","setQuote","loading","setLoading","useEffect","fetch","then","res","json","data","quoteText","quoteAuthor","quoteGenre","ListQuotes","location","quotes","setquotes","QueryString","parse","search","q","getQuotes","useCallback","map","x","i","key","Main","path","exact","component","Footer","href","App","ReactDOM","render","document","getElementById"],"mappings":"mOAqBeA,MAhBf,YAAgC,IAAdC,EAAa,EAAbA,UACd,OACI,gCACI,kBAAC,IAAD,CACIC,GAAG,IACHC,UAAU,aACVC,SAAO,EACPC,QAAS,kBAAMJ,EAAUK,KAAKC,SAJlC,SAOI,kBAAC,IAAD,S,qBCHDC,MATf,YAA6B,IAAZC,EAAW,EAAXA,QACb,OACI,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WAAf,gBAA8BM,EAA9B,a,iBCWGC,MAbf,YAAoC,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACtB,OACI,yBAAKT,UAAU,oBACX,kBAAC,IAAD,CAAMD,GAAI,aAAeS,GACrB,0BAAMR,UAAU,eAAeQ,GAC/B,6BACA,0BAAMR,UAAU,SAASS,GACzB,kBAACC,EAAA,EAAD,S,QC4BDC,MAlCf,YAAkC,IAAXC,EAAU,EAAVA,OAAU,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OAECF,oBAAS,GAFV,mBAEtBG,EAFsB,KAEbC,EAFa,KAiB7B,OALAC,qBAAU,WACND,GAAW,GARXE,MAAM,2DACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHR,EAASQ,EAAKT,OACdG,GAAW,QAMpB,CAACL,IAGA,oCACMI,EASE,kBAAC,qBAAD,MARA,oCACI,kBAAC,EAAD,CAAOV,QAASQ,EAAMU,UAAWZ,OAAQA,IACzC,kBAAC,EAAD,CACIJ,OAAQM,EAAMW,YACdhB,MAAOK,EAAMY,gB,uBCgEtBC,MAvCf,YAAmC,IAAbC,EAAY,EAAZA,SAAY,EACFf,mBAAS,IADP,mBACvBgB,EADuB,KACfC,EADe,OAEAjB,oBAAS,GAFT,mBAEvBG,EAFuB,KAEdC,EAFc,KAGxBT,EAASuB,IAAYC,MAAMJ,EAASK,QAAQC,EAC5CC,EAAYC,uBAAY,WAC1BjB,MAAM,qDAAD,OACoDX,EAAOP,QACxD,IACA,OAHH,qBAMAmB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHO,EAAUP,EAAKM,QACfZ,GAAW,QAEpB,CAACT,IAOJ,OALAU,qBAAU,WACND,GAAW,GACXkB,MACD,CAACA,IAGA,oCACKnB,EACG,kBAAC,qBAAD,MAEA,oCACI,yBAAKhB,UAAU,yBAAyBQ,GACvCqB,EAAOQ,KAAI,SAACC,EAAGC,GAAJ,OACR,kBAAC,EAAD,CAAOC,IAAKD,EAAGjC,QAASgC,EAAEd,kBCpEnCiB,MAZf,YAA2B,IAAX7B,EAAU,EAAVA,OACZ,OACI,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,OAAK,EAAC/B,OAAQA,GAC1B,kBAAC,EAAD,CAAaA,OAAQA,KAEzB,kBAAC,IAAD,CAAO8B,KAAK,UAAUE,UAAWjB,O,OCAlCkB,MAVf,WACI,OACI,gCACI,uBAAGC,KAAK,6BAAR,qBACC,MACD,uBAAGA,KAAK,6BAAR,sBCSGC,MAXf,WAAgB,IAAD,EACiBlC,mBAASV,KAAKC,OAD/B,mBACJQ,EADI,KACId,EADJ,KAEX,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAQA,UAAWA,IACnB,kBAAC,EAAD,CAAMc,OAAQA,IACd,kBAAC,EAAD,Q,OCPZoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0e31b68c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sync from \"@material-ui/icons/Sync\";\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header({ setRandom }) {\r\n    return (\r\n        <header>\r\n            <Link\r\n                to=\"/\"\r\n                className=\"random-btn\"\r\n                replace\r\n                onClick={() => setRandom(Date.now())}\r\n            >\r\n                Random\r\n                <Sync />\r\n            </Link>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Quote.css\";\r\n\r\nfunction Quote({ content }) {\r\n    return (\r\n        <div className=\"quote container\">\r\n            <div className=\"line\"></div>\r\n            <div className=\"content\">{`“${content}”`}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Auther.css\";\r\nimport { ArrowRightAlt } from \"@material-ui/icons\";\r\n\r\nfunction Auther({ auther, genre }) {\r\n    return (\r\n        <div className=\"auther container\">\r\n            <Link to={\"/auther?q=\" + auther}>\r\n                <span className=\"auther-name\">{auther}</span>\r\n                <br />\r\n                <span className=\"genre\">{genre}</span>\r\n                <ArrowRightAlt />\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auther;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Quote from \"./Quote\";\r\nimport Auther from \"./Auther\";\r\nimport \"./Quote.css\";\r\nimport { DisappearedLoading } from \"react-loadingg\";\r\n\r\nfunction RandomQuote({ random }) {\r\n    const [quote, setQuote] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const getRandomQuote = () => {\r\n        fetch(\"https://quote-garden.herokuapp.com/api/v2/quotes/random\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setQuote(data.quote);\r\n                setLoading(false);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getRandomQuote();\r\n    }, [random]);\r\n\r\n    return (\r\n        <>\r\n            {!loading ? (\r\n                <>\r\n                    <Quote content={quote.quoteText} random={random} />\r\n                    <Auther\r\n                        auther={quote.quoteAuthor}\r\n                        genre={quote.quoteGenre}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <DisappearedLoading />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RandomQuote;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport QueryString from \"query-string\";\r\nimport { DisappearedLoading } from \"react-loadingg\";\r\nimport Quote from \"./Quote\";\r\nimport \"./ListQuotes.css\";\r\n\r\n// export default class ListQuotes extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = { quotes: [], loading: true };\r\n//         this.auther = QueryString.parse(this.props.location.search).q;\r\n//     }\r\n//     getQuotes = () => {\r\n//         fetch(\r\n//             `https://quote-garden.herokuapp.com/api/v2/authors/${this.auther.replace(\r\n//                 \" \",\r\n//                 \"%20\"\r\n//             )}?page=1&limit=10`\r\n//         )\r\n//             .then((res) => res.json())\r\n//             .then((data) => {\r\n//                 this.changeState(\"quotes\", data.quotes);\r\n//                 this.changeState(\"loading\", false);\r\n//             });\r\n//     };\r\n\r\n//     changeState = (x, y) => {\r\n//         let state = this.state;\r\n//         state[x] = y;\r\n//         this.setState({ state });\r\n//     };\r\n//     componentDidMount() {\r\n//         this.changeState(\"loading\", true);\r\n//         this.getQuotes();\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//                 {this.state.loading ? (\r\n//                     <DisappearedLoading />\r\n//                 ) : (\r\n//                     <>\r\n//                         <div className=\"auther_name container\">\r\n//                             {this.auther}\r\n//                         </div>\r\n//                         {this.state.quotes.map((x, i) => (\r\n//                             <Quote key={i} content={x.quoteText} />\r\n//                         ))}\r\n//                     </>\r\n//                 )}\r\n//             </>\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction ListQuotes({ location }) {\r\n    const [quotes, setquotes] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const auther = QueryString.parse(location.search).q;\r\n    const getQuotes = useCallback(() => {\r\n        fetch(\r\n            `https://quote-garden.herokuapp.com/api/v2/authors/${auther.replace(\r\n                \" \",\r\n                \"%20\"\r\n            )}?page=1&limit=10`\r\n        )\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setquotes(data.quotes);\r\n                setLoading(false);\r\n            });\r\n    }, [auther]);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getQuotes();\r\n    }, [getQuotes]);\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <DisappearedLoading />\r\n            ) : (\r\n                <>\r\n                    <div className=\"auther_name container\">{auther}</div>\r\n                    {quotes.map((x, i) => (\r\n                        <Quote key={i} content={x.quoteText} />\r\n                    ))}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListQuotes;\r\n","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport RandomQuote from \"./RandomQuote\";\r\nimport ListQuotes from \"./ListQuotes\";\r\n\r\nfunction Main({ random }) {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route path=\"/\" exact random={random}>\r\n                    <RandomQuote random={random} />\r\n                </Route>\r\n                <Route path=\"/auther\" component={ListQuotes} />\r\n            </Switch>\r\n        </main>\r\n    );\r\n}\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <a href=\"https://github.com/Shoji5\">Tuấn Vũ</a>\r\n            {\" @ \"}\r\n            <a href=\"https://devchallenges.io/\">DevChallenges.io</a>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Footer from \"./Footer\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n    const [random, setRandom] = useState(Date.now());\r\n    return (\r\n        <Router>\r\n            <Header setRandom={setRandom} />\r\n            <Main random={random} />\r\n            <Footer />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}